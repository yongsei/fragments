{"version":3,"file":"static/js/828.8dd2f812.chunk.js","mappings":"0KAaM,MAAOA,UAAuBC,EAAAA,GAApCC,WAAAA,G,oBACU,KAAAC,MAAQ,kBA+ElB,CA7ES,eAAMC,CAASC,GAA4B,IAA3B,MAAEF,GAAyBE,EAC3B,kBAAVF,IACTG,KAAKH,MAAQA,EAEjB,CAEO,SAAMI,CAAIC,GAGf,MAAO,CAAEC,MAFKH,KAAKI,KAAKC,QAAQL,KAAKM,YAAYJ,EAAQK,MAG3D,CAEO,SAAMC,CAAIN,GACfF,KAAKI,KAAKK,QAAQT,KAAKM,YAAYJ,EAAQK,KAAML,EAAQC,MAC3D,CAEO,YAAMO,CAAOR,GAClBF,KAAKI,KAAKO,WAAWX,KAAKM,YAAYJ,EAAQK,KAChD,CAEO,UAAMK,GAGX,MAAO,CAAEA,KAFIZ,KAAKa,UAAUC,IAAIC,GAAKA,EAAEC,UAAUhB,KAAKiB,OAAOC,SAG/D,CAEO,WAAMC,GACX,IAAK,MAAMZ,KAAOP,KAAKa,UACrBb,KAAKI,KAAKO,WAAWJ,EAEzB,CAEO,aAAMa,G,MACX,MAAMC,EAAqB,GACrBC,EAAqB,GACrBC,EAAY,QACZX,EAAOY,OAAOZ,KAAKZ,KAAKI,MAAMqB,OAAOV,GAA8B,IAAzBA,EAAEW,QAAQH,IAE1D,IAAK,MAAMI,KAAUf,EAAM,CACzB,MAAML,EAAMoB,EAAOX,UAAUO,GACvBpB,EAAiC,QAA5ByB,EAAG5B,KAAKI,KAAKC,QAAQsB,UAAO,IAAAC,EAAAA,EAAI,IACnCzB,MAAO0B,SAAuB7B,KAAKC,IAAI,CAAEM,QAErB,kBAAjBsB,EACTP,EAASQ,KAAKvB,UAERP,KAAKQ,IAAI,CAAED,MAAKJ,UACtBkB,EAASS,KAAKvB,G,CAIlB,MAAO,CAAEc,WAAUC,WACrB,CAEO,eAAMS,GACX,MACMnB,EAAOY,OAAOZ,KAAKZ,KAAKI,MAAMqB,OAAOV,GAA8B,IAAzBA,EAAEW,QADhC,UAElB,IAAK,MAAMC,KAAUf,EACnBZ,KAAKI,KAAKO,WAAWgB,EAEzB,CAEA,QAAYvB,GACV,OAAO4B,OAAOC,YAChB,CAEA,UAAYhB,GACV,MAAsB,kBAAfjB,KAAKH,MAA4B,GAAK,GAAGG,KAAKH,QACvD,CAEQgB,OAAAA,GACN,OAAOW,OAAOZ,KAAKZ,KAAKI,MAAMqB,OAAOV,GAAgC,IAA3BA,EAAEW,QAAQ1B,KAAKiB,QAC3D,CAEQX,WAAAA,CAAYC,GAClB,OAAOP,KAAKiB,OAASV,CACvB,E","sources":["../node_modules/@capacitor/preferences/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  PreferencesPlugin,\n  ConfigureOptions,\n  GetOptions,\n  GetResult,\n  SetOptions,\n  RemoveOptions,\n  KeysResult,\n  MigrateResult,\n} from './definitions';\n\nexport class PreferencesWeb extends WebPlugin implements PreferencesPlugin {\n  private group = 'CapacitorStorage';\n\n  public async configure({ group }: ConfigureOptions): Promise<void> {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  public async get(options: GetOptions): Promise<GetResult> {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n\n    return { value };\n  }\n\n  public async set(options: SetOptions): Promise<void> {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  public async remove(options: RemoveOptions): Promise<void> {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  public async keys(): Promise<KeysResult> {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n\n    return { keys };\n  }\n\n  public async clear(): Promise<void> {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  public async migrate(): Promise<MigrateResult> {\n    const migrated: string[] = [];\n    const existing: string[] = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = this.impl.getItem(oldkey) ?? '';\n      const { value: currentValue } = await this.get({ key });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({ key, value });\n        migrated.push(key);\n      }\n    }\n\n    return { migrated, existing };\n  }\n\n  public async removeOld(): Promise<void> {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  private get impl(): Storage {\n    return window.localStorage;\n  }\n\n  private get prefix(): string {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  private rawKeys(): string[] {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  private applyPrefix(key: string) {\n    return this.prefix + key;\n  }\n}\n"],"names":["PreferencesWeb","WebPlugin","constructor","group","configure","_ref","this","get","options","value","impl","getItem","applyPrefix","key","set","setItem","remove","removeItem","keys","rawKeys","map","k","substring","prefix","length","clear","migrate","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","_a","currentValue","push","removeOld","window","localStorage"],"sourceRoot":""}